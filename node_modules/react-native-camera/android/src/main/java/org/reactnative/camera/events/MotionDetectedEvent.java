package org.reactnative.camera.events;

import androidx.core.util.Pools;

import org.reactnative.camera.CameraViewManager;
import org.reactnative.camera.utils.ImageDimensions;
import com.facebook.react.bridge.Arguments;
import com.facebook.react.bridge.WritableArray;
import com.facebook.react.bridge.WritableMap;
import com.facebook.react.uimanager.events.Event;
import com.facebook.react.uimanager.events.RCTEventEmitter;
import com.google.android.cameraview.CameraView;
// import com.google.android.gms.vision.face.Face;

public class MotionDetectedEvent extends Event<MotionDetectedEvent> {
  private static final Pools.SynchronizedPool<MotionDetectedEvent> EVENTS_POOL =
      new Pools.SynchronizedPool<>(3);

  private double mScaleX;
  private double mScaleY;
  private WritableMap mMotion;
  private ImageDimensions mImageDimensions;

  private MotionDetectedEvent() {}

  public static MotionDetectedEvent obtain(
      int viewTag,
      WritableMap motion,
      ImageDimensions dimensions,
      double scaleX,
      double scaleY
  ) {
    MotionDetectedEvent event = EVENTS_POOL.acquire();
    if (event == null) {
      event = new MotionDetectedEvent();
    }
    event.init(viewTag, motion, dimensions, scaleX, scaleY);
    return event;
  }

  private void init(
      int viewTag,
      WritableMap motion,
      ImageDimensions dimensions,
      double scaleX,
      double scaleY
  ) {
    super.init(viewTag);
    mMotion = motion;
    mImageDimensions = dimensions;
    mScaleX = scaleX;
    mScaleY = scaleY;
  }

  @Override
  public String getEventName() {
    return CameraViewManager.Events.EVENT_ON_MOTION_DETECTED.toString();
  }

  @Override
  public void dispatch(RCTEventEmitter rctEventEmitter) {
    rctEventEmitter.receiveEvent(getViewTag(), getEventName(), serializeEventData());
  }

  private WritableMap serializeEventData() {
    WritableMap event = Arguments.createMap();
    event.putString("type", "motion");
    event.putMap("motion", mMotion); 
    event.putInt("target", getViewTag());
    return event;
  }
}
