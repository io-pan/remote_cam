// @flow
import { NativeModules } from 'react-native';

const MotionDetectionDisabledMessage = 'Motion detection has not been included in this build.';

const MotionDetectorModule: Object = NativeModules.MotionDetector || {
  stubbed: true,
  Mode: {},
  Landmarks: {},
  // Classifications: {},
  detectMotion: () => new Promise((_, reject) => reject(motionDetectionDisabledMessage)),
};

type Point = { x: number, y: number };

export type MotionFeature = {
  bounds: {
    size: {
      width: number,
      height: number,
    },
    origin: Point,
  },
  // smilingProbability?: number,
  // leftEarPosition?: Point,
  // rightEarPosition?: Point,
  // leftEyePosition?: Point,
  // leftEyeOpenProbability?: number,
  // rightEyePosition?: Point,
  // rightEyeOpenProbability?: number,
  // leftCheekPosition?: Point,
  // rightCheekPosition?: Point,
  // leftMouthPosition?: Point,
  // mouthPosition?: Point,
  // rightMouthPosition?: Point,
  // bottomMouthPosition?: Point,
  // noseBasePosition?: Point,
  // yawAngle?: number,
  // rollAngle?: number,
};

type DetectionOptions = {
  mode?: $Keys<typeof MotionDetectorModule.Mode>,
  detectLandmarks?: $Keys<typeof MotionDetectorModule.Landmarks>,
  // runClassifications?: $Keys<typeof MotionDetectorModule.Classifications>,
};

export default class MotionDetector {
  static Constants = {
    Mode: MotionDetectorModule.Mode,
    Landmarks: MotionDetectorModule.Landmarks,
    // Classifications: MotionDetectorModule.Classifications,
  };

  static detectMotionAsync(uri: string, options: ?DetectionOptions): Promise<Array<MotionFeature>> {
    return MotionDetectorModule.detectMotion({ ...options, uri });
  }
}

export const Constants = MotionDetector.Constants;
